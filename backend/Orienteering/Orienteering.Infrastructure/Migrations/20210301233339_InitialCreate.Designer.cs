// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Orienteering.Infrastructure.Persistence;

namespace Orienteering.Infrastructure.Migrations
{
    [DbContext(typeof(OrienteeringContext))]
    [Migration("20210301233339_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("GameUser", b =>
                {
                    b.Property<Guid>("GamesWhereParticipatesId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ParticipantsId")
                        .HasColumnType("char(36)");

                    b.HasKey("GamesWhereParticipatesId", "ParticipantsId");

                    b.HasIndex("ParticipantsId");

                    b.ToTable("GameUser");
                });

            modelBuilder.Entity("Orienteering.Domain.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("TrackId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Orienteering.Domain.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("Orienteering.Domain.Entities.TrackPoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.Property<Guid?>("TrackId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TrackId");

                    b.ToTable("TrackPoints");
                });

            modelBuilder.Entity("Orienteering.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("varchar(254) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GameUser", b =>
                {
                    b.HasOne("Orienteering.Domain.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesWhereParticipatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orienteering.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Orienteering.Domain.Entities.Game", b =>
                {
                    b.HasOne("Orienteering.Domain.Entities.User", "Creator")
                        .WithMany("GamesCreated")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orienteering.Domain.Entities.Track", "Track")
                        .WithMany("GamesWhereUsed")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("Orienteering.Domain.Entities.Track", b =>
                {
                    b.HasOne("Orienteering.Domain.Entities.User", "Creator")
                        .WithMany("TracksCreated")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Orienteering.Domain.Entities.TrackPoint", b =>
                {
                    b.HasOne("Orienteering.Domain.Entities.Track", null)
                        .WithMany("TrackPoints")
                        .HasForeignKey("TrackId");

                    b.OwnsOne("Orienteering.Domain.Entities.GeoCoordinates", "Coordinates", b1 =>
                        {
                            b1.Property<Guid>("TrackPointId")
                                .HasColumnType("char(36)");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double");

                            b1.HasKey("TrackPointId");

                            b1.ToTable("TrackPoints");

                            b1.WithOwner()
                                .HasForeignKey("TrackPointId");
                        });

                    b.Navigation("Coordinates");
                });

            modelBuilder.Entity("Orienteering.Domain.Entities.Track", b =>
                {
                    b.Navigation("GamesWhereUsed");

                    b.Navigation("TrackPoints");
                });

            modelBuilder.Entity("Orienteering.Domain.Entities.User", b =>
                {
                    b.Navigation("GamesCreated");

                    b.Navigation("TracksCreated");
                });
#pragma warning restore 612, 618
        }
    }
}
